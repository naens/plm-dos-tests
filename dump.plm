/****p* plm-exercises/dump
 *  NAME
 *    dump -- print file in hexadecimal and ascii
 *  DESCRIPTION
 *    Prints a file, the name of which is given as command line argument, on
 *    the console.  Each line corresponds to 16 bytes, the first column
 *    contain the offset of the first byte of the line from the beginning of
 *    the file, the second column contains the hexadecimal values of each
 *    byte and the third column contains the the ASCII representation of
 *    printable characters.
 * 
 *    One screen is printed at a time if the file is large.  The user can
 *    navigate using ^S for previous, ^X, space or enter for next.  By typing
 *    'g', the user can enter the address to which to jump (the addresses are
 *    absolute offsets from the beginning of the file.
 *  USES
 *    cons and sys modules
 *****
 */
dump:
do;

$include (const.lit)
$include (cons.ext)
$include (sys.ext)
$include (fio.ext)
$include (str.ext)

    declare line$len literally '16';
    declare line$num literally '16';

    /* prints n hex numbers separated by spaces, with padding to width */
    printhexline: procedure (pbuf, len, width);
        declare pbuf address;
        declare bf based pbuf (*) byte;
        declare len word;
        declare width integer;
        declare i integer;
        do i = 0 to width - 1;
            if i < integer(len) then
                call prhexbyte(bf(i));
            else
                call prstr(.('   ', 0));
            call prchr(' ');
            if i = 7 then
                call prchr(' ');
        end;
    end printhexline;


    /* prints n chars from buffer */
    printcharline: procedure (pbuf, len);
        declare pbuf address;
        declare bf based pbuf (*) byte;
        declare len word;
        declare i integer;
        declare c word;
        call prchr('|');
        do i = 0 to len - 1;
            c = bf(i);
            if c < ' ' or c > '~' then
                call prchr('.');
            else
                call prchr(c);
        end;
        call prchr('|');
    end printcharline;


    /* display single line from the buffer of the file being read */
    display$line: procedure (addr, pbuf, len, nline);
        declare addr word;
        declare pbuf address;
        declare len word;
        declare nline word;
        call prhexword(addr);
        call prstr(.('    ', 0));
        call printhexline(pbuf, len, line$len);
        call prchr(' ');
        call printcharline(pbuf, len);
        call prcrlf;
    end display$line;


    /* read max len * num from file
     * display in lines of len, print num lines
     * return the number of bytes really printed
     */
    display$screen: procedure (f, addr, pbuf, len, num) word;
        declare f integer;
        declare addr word;
        declare pbuf address;
        declare len word;       /* maximum length of a line */
        declare num word;       /* maximum number of lines to display */
        declare total word;
        declare nline word;
        declare i word;
        total = 0;
        i = 0;
        do while i < num;
            nline = freadbuf(f, pbuf, len);
            call display$line(addr + total, pbuf, len, nline);
            total = total + nline;
            if nline < len then
                goto endloop;
            i = i + 1;
        end;
    endloop:
        return total;
    end display$screen;


    /* parses the seek command and executes it
     * return 0 on success, -1 on error
     * sets a (the new address in the file)
     * sets xcmd telling whther a command has been executed */
    seek$go: procedure(f, paddr, pbuf, slen, pxcmd) integer;
        declare f integer;
        declare paddr address;
        declare a based paddr word;
        declare pbuf address;
        declare buf based pbuf (*) address;
        declare slen word;
        declare pos word;
        declare offset integer;
        declare pxcmd address;
        declare xcmd based pxcmd boolean;
 
        /* command minimum 1 character */
        if slen < 1 then
        do;
            xcmd = false;
            return 0;
        end;

        if buf(0) >= '0' and buf(0) <= '9' then
        do;
            pos = xstr2word(.buf(0));
            if fseekset(f, pos) = -1 then
                return -1;
            a = pos;
            xcmd = true;
            return 0;
        end;

        /* command minimum 2 characters */
        if slen < 2 then
        do;
            xcmd = false;
            return 0;
        end;

        if buf(0) = '+' then
        do;
            offset = integer(xstr2word(.buf(1)));
            if fseekcur(f, offset) = -1 then
                return -1;
            a = a + word(offset);
            xcmd = true;
            return 0;
        end;
        
        if buf(0) = '-' then
        do;
            offset = -integer(xstr2word(.buf(1)));
            if fseekcur(f, offset) = -1 then
                return -1;
            a = a + word(offset);
            xcmd = true;
            return 0;
        end;

        /* command minimum 3 characters */
        if slen < 3 then
        do;
            xcmd = false;
            return 0;
        end;

        if buf(0) = 'e' and buf(1) = '-' then
        do;
            pos = xstr2word(.buf(2));
            if fseekend(f, pos) = -1 then
                return -1;
            a = fgetsize(f) - pos;
            xcmd = true;
            return 0;
        end;
        
        if buf(0) = 'b' and buf(1) = '+' then
        do;
            pos = xstr2word(.buf(2));
            if fseekset(f, pos) = -1 then
                return -1;
            a = pos;
            xcmd = true;
            return 0;
        end;

        xcmd = false;
        return 0;

    end seek$go;
    

    /* dump utility: print hex file and navigate it
     * Pseudocode:
     *   open file
     *   a=0
     *   loop
     *     nread := read_and_display from file line$len*line$num
     *     a = a + nread
     *     read command from keyboard
     *     if command is 'q' then
     *       exit from loop
     *     else
     *       if seek command then
     *         read seek line
     *         call parse_seek_and_go procedure    // with pos=a-nread
     *       <repeat loop>
     *     end if
     *   end loop
     */

    declare argc integer;
    declare pargv address;
    declare argv based pargv (*) address;

    declare f integer;
    declare n word;         /* number of butes read */
    declare a word;         /* position in the file */
    declare nread word;     /* number of bytes read for one screen */
    declare pos word;
    declare offset integer;
    declare buf(line$len) byte;
    declare key word;
    declare scrsz word;     /* number of bytes on one screen */
    declare numlen word;
    declare xcmd boolean;   /* valid command executed */

    /* read arguments */
    call getargs(.argc, .pargv);
    if argc <> 2 then
    do;
        call println(.('Usage: dump <filename>', 0));
        goto exit;
    end;

    /* open the file */
    f = fopen(argv(1), true, false);
    if f = -1 then
    do;
        call println(.('File open error', 0));
        goto exit;
    end;
    call println(.('File open OK!', 0));
    a = 0;
    do while true;
        /* read and display one screen, return number of bytes read */
        nread = display$screen(f, a, .buf, line$len, line$num);
        a = a + nread;
        xcmd = false;

        /* repeat readkey until a command is executed */
        do while not xcmd;
            call readkey(.key);
            if key = 'q' then       /* q: exit */
                goto endloop;
            else if key = 'g' then  /* g: read go command, parse, execute */
            do;
                call prstr(.('go: ', 0));
                n = readln(.buf, line$len - 1);
                if seek$go(f, a, .buf, n, .xcmd) = -1 then
                    goto endloop;   /* catastrophic failure: nothing to do */
                xcmd = true;
            end;
            else if key = 'u' then  /* u: go one screen up */
            do;
                if a > nread then
                do;
                    if a > 2 * line$len * line$num then
                        pos = a - 2 * line$len * line$num;
                    else
                        pos = 0;
                    if fseekset(f, pos) <> -1 then
                        a = pos;
                    xcmd = true;
                end;
            end;
            else                    /* any other key: go one screen down */
                xcmd = true;
        end;
        call prcrlf;

    end;
endloop:
/*
    if f <> -1 then
    do;
        call println(.('File open OK!', 0));
        call prhexword(fgetsize(f));
        call prcrlf;
        n = freadbuf(f, .buf, line$len);
        a = 0;
        scrsz = line$len * line$num;
        do while n > 0;
            if a > 0 and a mod scrsz = 0 then
            do;
                call readkey(.key);
                if key = 'u' then
                do;
                    if a >= 2 * scrsz then
                    do;
                        if fseekset(f, a - 2 * scrsz) <> -1 then
                        do;
                            a = a - 2 * scrsz;
                            n = freadbuf(f, .buf, line$len);
                        end;
                    end;
                    else
                        goto continue;
                end;
                if key = 'g' then
                do;
                    call prstr(.('a = ', 0));
                    call prhexword(a);
                    call prcrlf;
                    call prstr(.('go: ', 0));
                    call readln(.buf, line$len - 1);
                    call prstr(.('going: ', 0));
                    call println(.buf);
                    if buf(0) = '+' then
                    do;
                        offset = integer(xstr2word(.buf(1)));
                        if fseekcur(f, offset) = -1 then
                            goto endloop;
                        a = a + word(offset);
                    end;
                    else if buf(0) = '-' then
                    do;
                        offset = -integer(xstr2word(.buf(1)));
                        if fseekcur(f, offset) = -1 then
                            goto endloop;
                        a = a + word(offset);
                    end;
                    else if buf(0) = 'e' and buf(1) = '-' then
                    do;
                        pos = xstr2word(.buf(2));
                        if fseekend(f, pos) = -1 then
                            goto endloop;
                        a = fgetsize(f) - pos;
                    end;
                    else if buf(0) = 'b' and buf(1) = '+' then
                    do;
                        pos = xstr2word(.buf(2));
                        if fseekset(f, pos) = -1 then
                            goto endloop;
                        a = pos;
                    end;
                    else
                    do;
                        pos = xstr2word(.buf);
                        if fseekset(f, pos) = -1 then
                            goto endloop;
                        a = pos;
                    end;
                    call prstr(.('a = ', 0));
                    call prhexword(a);
                    call prcrlf;
                    n = freadbuf(f, .buf, line$len);
                end;
                else if key = 'q' then
                    goto close;
                call prcrlf;
            end;
            call prhexword(a);
            call prstr(.('    ', 0));
            call printhexline(.buf, n, line$len);
            call prchr(' ');
            call printcharline(.buf, n);
            call prcrlf;
            a = a + n;
            n = freadbuf(f, .buf, line$len);
continue:
        end;
*/

close:
    call fclose(f);

exit:
    call term;

end;
