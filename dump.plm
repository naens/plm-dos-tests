/****p* plm-exercises/dump
 *  NAME
 *    dump -- print file in hexadecimal and ascii
 *  DESCRIPTION
 *    Prints a file, the name of which is given as command line argument, on
 *    the console.  Each line corresponds to 16 bytes, the first column
 *    contain the offset of the first byte of the line from the beginning of
 *    the file, the second column contains the hexadecimal values of each
 *    byte and the third column contains the the ASCII representation of
 *    printable characters.
 * 
 *    One screen is printed at a time if the file is large.  The user can
 *    navigate using ^S for previous, ^X, space or enter for next.  By typing
 *    'g', the user can enter the address to which to jump (the addresses are
 *    absolute offsets from the beginning of the file.
 *  USES
 *    cons and sys modules
 *****
 */
dump:
do;

    prchr: procedure (chr) external;
        declare chr byte;
    end prchr;

    prhexbyte: procedure (b) external;        /* TODO */
        declare b byte;
    end prhexbyte;

    prhexword: procedure (w) external;        /* TODO */
        declare w word;
    end prhexword;

    prstr: procedure (pstr) external;
        declare pstr address;
    end prstr;

    prcrlf: procedure external;
    end prcrlf;

    readkey: procedure (pkey) external;
        declare pkey address;
    end readkey;

    readln: procedure (pstr, len) external;   /* TODO */
        declare pstr address;
        declare len word;
    end readln;

    getargs: procedure (pargc, pargv) external; /* TODO */
        declare pargc address;
        declare pargv address;
    end getargs;

    term: procedure external;
    end term;

    declare key word;
    declare c byte;
    declare f byte;
    declare i word;
    declare j word;
    declare buf (255) byte;
    declare argc word;
    declare pargv address;
    declare argv based pargv address;
    declare pstr address;
    declare str based pstr address;

    call getargs(.argc, .pargv);
    call prhexword(argc);
    call prcrlf;
    pstr = pargv;
    do while str <> 0;
        call prstr(str);
        call prcrlf;
        pstr = pstr + 2;
    end;

/*
    call readln(.buf, 255);
    call prchr(':');
    call prstr(.buf);
    call prchr(':');
    call prcrlf;
    call prchr(':');
*/

/*
    i = 0;
    do while buf(i) <> 0;
        call prhexbyte(buf(i));
        call prchr(':');
        call prchr(buf(i));
        call prcrlf;
        i = i + 1;
    end;
*/

/*

    do while c <> 'q';
        call readkey(.key);
        c = byte(key);
        call prchr(c);
        f = byte(shr(key, 8));
        call prchr(':');
        do j = 0 to 7;
            call prchr((f and 1) + '0');
            f = shr(f, 1);
        end;
        call prcrlf;
    end;
*/
    call term;

end;
